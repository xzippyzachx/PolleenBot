export interface CreateTweetParams {
    /**
    * The text of your Tweet.
    */
    'text': string;
    /**
    * Tweets a link directly to a Direct Message conversation with an account.
    */
    'direct_message_deep_link'?: string;
    /**
    * Allows you to Tweet exclusively for Super Followers.
    */
    'for_super_followers_only'?: boolean;
    /**
    * A place in the world.
    */
    'geo'?: {
        place_id: string;
    };
    /**
    * A JSON object that contains media information being attached to created Tweet. This is mutually exclusive from Quote Tweet ID and Poll.
    */
    'media'?: {
        media_ids: string[];
        tagged_user_ids?: string[];
    };
    /**
    * A JSON object that contains options for a Tweet with a poll. This is mutually exclusive from Media and Quote Tweet ID.
    */
    'poll'?: {
        options: string[];
        duration_minutes: number;
    };
    /**
    * Link to the Tweet being quoted.
    */
    'quote_tweet_id'?: string;
    /**
    * A JSON object that contains information of the Tweet being replied to.
    */
    'reply'?: {
        exclude_reply_user_ids?: string;
        in_reply_to_tweet_id: string;
    };
    /**
    * Settings to indicate who can reply to the Tweet. Options include "mentionedUsers" and "following". If the field isnâ€™t specified, it will default to everyone.
    */
    'reply_settings'?: string;
}
export interface DeleteTweetParams {
    /**
    * The ID of the Tweet to delete.
    */
    'id': string;
}
export interface SearchRecentTweetsParams {
    /**
    * A UTF-8, URL-encoded search query of 500 characters maximum, including operators. Queries may additionally be limited by complexity.
    */
    'query': string;
    /**
    * YYYY-MM-DDTHH:mm:ssZ (ISO 8601/RFC 3339). The newest, most recent UTC timestamp to which the Tweets will be provided.
  Timestamp is in second granularity and is exclusive (for example, 12:00:01 excludes the first second of the minute).
  By default, a request will return Tweets from as recent as 30 seconds ago if you do not include this parameter.
  
    */
    'end_time'?: string;
    /**
    * Expansions enable you to request additional data objects that relate to the originally returned Tweets.
  Submit a list of desired expansions in a comma-separated list without spaces.
  The ID that represents the expanded data object will be included directly in the Tweet data object,
  but the expanded object metadata will be returned within the includes response object,
  and will also include the ID so that you can match this data object to the original Tweet object.
  
    */
    'expansions'?: string;
    /**
    * The maximum number of search results to be returned by a request. A number between 10 and 100. By default, a request response will return 10 results
  
    */
    'max_results'?: string | number;
    /**
    * This fields parameter enables you to select which specific media fields will deliver in each returned Tweet.
  Specify the desired fields in a comma-separated list without spaces between commas and fields.
  The Tweet will only return media fields if the Tweet contains media and if you've also included the expansions=attachments.media_keys query parameter in your request.
  While the media ID will be located in the Tweet object, you will find this ID and all additional media fields in the includes data object.
  
    */
    'media.fields'?: string;
    /**
    * This parameter is used to get the next 'page' of results.
  The value used with the parameter is pulled directly from the response provided by the API, and should not be modified.
  
    */
    'next_token'?: string;
    /**
    * This fields parameter enables you to select which specific place fields will deliver in each returned Tweet.
  Specify the desired fields in a comma-separated list without spaces between commas and fields.
  The Tweet will only return place fields if the Tweet contains a place and if you've also included the expansions=geo.place_id query parameter in your request.
  While the place ID will be located in the Tweet object, you will find this ID and all additional place fields in the includes data object.
  
    */
    'place.fields'?: string;
    /**
    * This fields parameter enables you to select which specific poll fields will deliver in each returned Tweet.
  Specify the desired fields in a comma-separated list without spaces between commas and fields.
  The Tweet will only return poll fields if the Tweet contains a poll and if you've also included the expansions=attachments.poll_ids query parameter in your request.
  While the poll ID will be located in the Tweet object, you will find this ID and all additional poll fields in the includes data object.
  
    */
    'poll.fields'?: string;
    /**
    * Returns results with a Tweet ID greater than (that is, more recent than) the specified ID.
  The ID specified is exclusive and responses will not include it.
  If included with the same request as a start_time parameter, only since_id will be used.
  
    */
    'since_id'?: string;
    /**
    * This parameter is used to specify the order in which you want the Tweets returned.
  By default, a request will return the most recent Tweets first (sorted by recency).
  
    */
    'sort_order'?: string;
    /**
    * YYYY-MM-DDTHH:mm:ssZ (ISO 8601/RFC 3339). The oldest UTC timestamp (from most recent seven days) from which the Tweets will be provided.
  Timestamp is in second granularity and is inclusive (for example, 12:00:01 includes the first second of the minute).
  If included with the same request as a since_id parameter, only since_id will be used.
  By default, a request will return Tweets from up to seven days ago if you do not include this parameter.
  
    */
    'start_time'?: string;
    /**
    * This fields parameter enables you to select which specific Tweet fields will deliver in each returned Tweet object.
  Specify the desired fields in a comma-separated list without spaces between commas and fields.
  You can also pass the expansions=referenced_tweets.id expansion to return the specified fields for both the original Tweet and any included referenced Tweets.
  The requested Tweet fields will display in both the original Tweet data object, as well as in the referenced Tweet expanded data object that will be located in the includes data object.
  
    */
    'tweet.fields'?: string;
    /**
    * Returns results with a Tweet ID less than (that is, older than) the specified ID.
  The ID specified is exclusive and responses will not include it.
  
    */
    'until_id'?: string;
    /**
    * This fields parameter enables you to select which specific user fields will deliver in each returned Tweet.
  
    */
    'user.fields'?: string;
}
export interface SearchAllTweetsParams {
    /**
    * A UTF-8, URL-encoded search query of 500 characters maximum, including operators. Queries may additionally be limited by complexity.
    */
    'query': string;
    /**
    * YYYY-MM-DDTHH:mm:ssZ (ISO 8601/RFC 3339). The newest, most recent UTC timestamp to which the Tweets will be provided.
  Timestamp is in second granularity and is exclusive (for example, 12:00:01 excludes the first second of the minute).
  By default, a request will return Tweets from as recent as 30 seconds ago if you do not include this parameter.
  
    */
    'end_time'?: string;
    /**
    * Expansions enable you to request additional data objects that relate to the originally returned Tweets.
  Submit a list of desired expansions in a comma-separated list without spaces.
  The ID that represents the expanded data object will be included directly in the Tweet data object,
  but the expanded object metadata will be returned within the includes response object,
  and will also include the ID so that you can match this data object to the original Tweet object.
  
    */
    'expansions'?: string;
    /**
    * The maximum number of search results to be returned by a request. A number between 10 and 100. By default, a request response will return 10 results
  
    */
    'max_results'?: string | number;
    /**
    * This fields parameter enables you to select which specific media fields will deliver in each returned Tweet.
  Specify the desired fields in a comma-separated list without spaces between commas and fields.
  The Tweet will only return media fields if the Tweet contains media and if you've also included the expansions=attachments.media_keys query parameter in your request.
  While the media ID will be located in the Tweet object, you will find this ID and all additional media fields in the includes data object.
  
    */
    'media.fields'?: string;
    /**
    * This parameter is used to get the next 'page' of results.
  The value used with the parameter is pulled directly from the response provided by the API, and should not be modified.
  
    */
    'next_token'?: string;
    /**
    * This fields parameter enables you to select which specific place fields will deliver in each returned Tweet.
  Specify the desired fields in a comma-separated list without spaces between commas and fields.
  The Tweet will only return place fields if the Tweet contains a place and if you've also included the expansions=geo.place_id query parameter in your request.
  While the place ID will be located in the Tweet object, you will find this ID and all additional place fields in the includes data object.
  
    */
    'place.fields'?: string;
    /**
    * This fields parameter enables you to select which specific poll fields will deliver in each returned Tweet.
  Specify the desired fields in a comma-separated list without spaces between commas and fields.
  The Tweet will only return poll fields if the Tweet contains a poll and if you've also included the expansions=attachments.poll_ids query parameter in your request.
  While the poll ID will be located in the Tweet object, you will find this ID and all additional poll fields in the includes data object.
  
    */
    'poll.fields'?: string;
    /**
    * Returns results with a Tweet ID greater than (that is, more recent than) the specified ID.
  The ID specified is exclusive and responses will not include it.
  If included with the same request as a start_time parameter, only since_id will be used.
  
    */
    'since_id'?: string;
    /**
    * This parameter is used to specify the order in which you want the Tweets returned.
  By default, a request will return the most recent Tweets first (sorted by recency).
  
    */
    'sort_order'?: string;
    /**
    * YYYY-MM-DDTHH:mm:ssZ (ISO 8601/RFC 3339). The oldest UTC timestamp (from most recent seven days) from which the Tweets will be provided.
  Timestamp is in second granularity and is inclusive (for example, 12:00:01 includes the first second of the minute).
  If included with the same request as a since_id parameter, only since_id will be used.
  By default, a request will return Tweets from up to seven days ago if you do not include this parameter.
  
    */
    'start_time'?: string;
    /**
    * This fields parameter enables you to select which specific Tweet fields will deliver in each returned Tweet object.
  Specify the desired fields in a comma-separated list without spaces between commas and fields.
  You can also pass the expansions=referenced_tweets.id expansion to return the specified fields for both the original Tweet and any included referenced Tweets.
  The requested Tweet fields will display in both the original Tweet data object, as well as in the referenced Tweet expanded data object that will be located in the includes data object.
  
    */
    'tweet.fields'?: string;
    /**
    * Returns results with a Tweet ID less than (that is, older than) the specified ID.
  The ID specified is exclusive and responses will not include it.
  
    */
    'until_id'?: string;
    /**
    * This fields parameter enables you to select which specific user fields will deliver in each returned Tweet.
  
    */
    'user.fields'?: string;
}
export interface CountRecentTweetsParams {
    /**
    * A UTF-8, URL-encoded search query of 500 characters maximum, including operators. Queries may additionally be limited by complexity.
    */
    'query': string;
    /**
    * YYYY-MM-DDTHH:mm:ssZ (ISO 8601/RFC 3339). The newest, most recent UTC timestamp to which the Tweets will be provided.
  Timestamp is in second granularity and is exclusive (for example, 12:00:01 excludes the first second of the minute).
  By default, a request will return Tweets from as recent as 30 seconds ago if you do not include this parameter.
  
    */
    'end_time'?: string;
    /**
    * YYYY-MM-DDTHH:mm:ssZ (ISO 8601/RFC 3339). The oldest UTC timestamp (from most recent seven days) from which the Tweets will be provided.
  Timestamp is in second granularity and is inclusive (for example, 12:00:01 includes the first second of the minute).
  If included with the same request as a since_id parameter, only since_id will be used.
  By default, a request will return Tweets from up to seven days ago if you do not include this parameter.
  
    */
    'start_time'?: string;
    /**
    * This is the granularity that you want the timeseries count data to be grouped by. You can requeset minute, hour, or day granularity.
  The default granularity, if not specified is hour.
  
    */
    'granularity'?: string;
    /**
    * YYYY-MM-DDTHH:mm:ssZ (ISO 8601/RFC 3339). The oldest UTC timestamp (from most recent seven days) from which the Tweet counts will be provided.
  Timestamp is in second granularity and is inclusive (for example, 12:00:01 includes the first second of the minute).
  If included with the same request as a since_id parameter, only since_id will be used.
  By default, a request will return Tweet counts from up to seven days ago if you do not include this parameter.
  
    */
    'since_id'?: string;
    /**
    * Returns results with a Tweet ID less than (that is, older than) the specified ID.
  The ID specified is exclusive and responses will not include it.
  
    */
    'until_id'?: string;
}
export interface CountAllTweetsParams {
    /**
    * A UTF-8, URL-encoded search query of 500 characters maximum, including operators. Queries may additionally be limited by complexity.
    */
    'query': string;
    /**
    * YYYY-MM-DDTHH:mm:ssZ (ISO 8601/RFC 3339). The newest, most recent UTC timestamp to which the Tweets will be provided.
  Timestamp is in second granularity and is exclusive (for example, 12:00:01 excludes the first second of the minute).
  By default, a request will return Tweets from as recent as 30 seconds ago if you do not include this parameter.
  
    */
    'end_time'?: string;
    /**
    * YYYY-MM-DDTHH:mm:ssZ (ISO 8601/RFC 3339). The oldest UTC timestamp (from most recent seven days) from which the Tweets will be provided.
  Timestamp is in second granularity and is inclusive (for example, 12:00:01 includes the first second of the minute).
  If included with the same request as a since_id parameter, only since_id will be used.
  By default, a request will return Tweets from up to seven days ago if you do not include this parameter.
  
    */
    'start_time'?: string;
    /**
    * This is the granularity that you want the timeseries count data to be grouped by. You can requeset minute, hour, or day granularity.
  The default granularity, if not specified is hour.
  
    */
    'granularity'?: string;
    /**
    * YYYY-MM-DDTHH:mm:ssZ (ISO 8601/RFC 3339). The oldest UTC timestamp (from most recent seven days) from which the Tweet counts will be provided.
  Timestamp is in second granularity and is inclusive (for example, 12:00:01 includes the first second of the minute).
  If included with the same request as a since_id parameter, only since_id will be used.
  By default, a request will return Tweet counts from up to seven days ago if you do not include this parameter.
  
    */
    'since_id'?: string;
    /**
    * Returns results with a Tweet ID less than (that is, older than) the specified ID.
  The ID specified is exclusive and responses will not include it.
  
    */
    'until_id'?: string;
    /**
    * This parameter is used to get the next 'page' of results.
  The value used with the parameter is pulled directly from the response provided by the API, assuming that your request contains more than 31 days-worth of results,
  and should not be modified. You can learn more by visiting our page on pagination.
  
    */
    'next_token'?: string;
}
